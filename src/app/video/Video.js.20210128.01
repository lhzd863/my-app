import React, { Component } from 'react';
import { WingBlank, WhiteSpace, Button ,Flex,ActionSheet} from 'antd-mobile';
import "../../common/common.css";
import MyHeader from '../../components/MyHeader.js';
import { createForm } from 'rc-form';
import PropTypes from 'prop-types';
import Upload from 'rc-upload';
import axios from 'axios';
import { Button as EButton} from 'element-react';
import 'element-theme-default';
import ReactPlayer from 'react-player';

var uploadProps
class Video extends Component {

    constructor(props) {
        super(props);
        this.state = {
            video_file_name: props.video_file_name || '',
            video_op: props.video_op || ''
        };
    }

    dataListFilter = [
      { url: 'aya', title: '素描',act: 'filter-sketch' },
      { url: 'aya', title: '彩色转黑白' ,act: 'filter-blackwithe'},
      { url: 'aya', title: '流年' ,act: 'filter-fleeting'},
      { url: 'aya', title: '旧电影' ,act: 'filter-oldfilm'},
      { url: 'aya', title: '反色',act: 'filter-reverse' },
      { url: 'aya', title: '模糊',act: 'filter-blur' },
      { url: 'aya', title: '轮廓滤波',act: 'filter-contour' },
      { url: 'aya', title: '浮雕滤波',act: 'filter-emboss' },
      { url: 'aya', title: '寻找边缘',act: 'filter-findedges' },
      { url: 'aya', title: '图像油漆',act: 'filter-emboss1' },
      { url: 'aya', title: '直方均衡化',act: 'filter-hist' },
    ].map(obj => ({
      icon: <img src={`http://106.75.249.244:9000/my-app/images/${obj.url}.png`} alt={obj.title} style={{ width: 36 }} />,
      title: obj.title,
      act: obj.act
    }));

    dataListStage = [
      { url: 'aya', title: '发送给朋友',act: 'filter-1' },
      { url: 'aya', title: '新浪微博' ,act: 'filter-2'},
      { url: 'aya', title: '生活圈' ,act: 'filter-3'},
      { url: 'aya', title: '微信好友' ,act: 'filter-4'},
      { url: 'aya', title: 'QQ',act: 'filter-5' },
    ].map(obj => ({
      icon: <img src={`http://106.75.249.244:9000/my-app/images/${obj.url}.png`} alt={obj.title} style={{ width: 36 }} />,
      title: obj.title,
      act: obj.act
    }));

    handleVideoDowith(e){
       this.handleData()
    }

    handleVideoDownload(){
       window.location.href=this.props.video_url
    }

    handleVideoEdit(){
       this.props.displayConsoleCreate('block');
    }
    handleShowActionSheetFilter(){
       const data = [[...this.dataListFilter, this.dataListFilter[2]], [this.dataListFilter[3], this.dataListFilter[4]]];
         ActionSheet.showShareActionSheetWithOptions({
         options: data,
         message: '请选择',
       },
       (buttonIndex, rowIndex) => {
         this.props.videoOpCreate(buttonIndex > -1 ? data[rowIndex][buttonIndex].act:'no');
       });
    }

    handleShowActionSheetStage(){
       const data = [[...this.dataListFilter, this.dataListFilter[2]], [this.dataListFilter[3], this.dataListFilter[4]]];
         ActionSheet.showShareActionSheetWithOptions({
         options: data,
         message: '请选择',
       },
       (buttonIndex, rowIndex) => {
         //this.setState({ clicked2: buttonIndex > -1 ? data[rowIndex][buttonIndex].title : 'cancel' });
         //console.log(data[rowIndex][buttonIndex].act)
         //console.log(data[rowIndex][buttonIndex].title)
         this.props.videoOpCreate(buttonIndex > -1 ? data[rowIndex][buttonIndex].act:'no');
       });
    }

    handleData() {
        this.props.videoFileNameCreate(localStorage.getItem('aya-video-upload-filename'));
        var const_video_filename = localStorage.getItem('aya-video-upload-filename');
        if (const_video_filename === undefined || const_video_filename.length < 1){
           console.log(const_video_filename+"video filename is null")
           return
        }
        var const_video_op = this.props.video_op;
        if (const_video_op === undefined || const_video_op.length < 1){
           console.log("video op is null")
           return
        }

        let accesstoken = '';
        if (JSON.parse(localStorage.getItem(global.constants.const_localstorage_id) || '[]')[0] === undefined ||
            JSON.parse(localStorage.getItem(global.constants.const_localstorage_id) || '[]')[0].username === undefined) {
            accesstoken = global.constants.const_default_accesstoken;
        } else {
            accesstoken = JSON.parse(localStorage.getItem(global.constants.const_localstorage_id) || '[]')[0].accesstoken;
        }
        let url = global.constants.const_api_url + "/app/video/edit?accesstoken=" + accesstoken;
        console.log(const_video_filename+"->"+const_video_op)
        fetch(url, {
            method: "Post",
            mode: "cors",
            headers: {
                'Content-Type': 'application/json;charset=UTF-8',
                'Access-Control-Allow-Origin': '*'
            },
            body: JSON.stringify({
                filename: const_video_filename,op:const_video_op
            })
        })
            .then(response => response.json())
            .then((dat) => {
              this.props.videoUrlCreate(dat[0].url);
              this.props.displayConsoleCreate('none');
            })
            .catch(function (err) {
                console.log(err);
                this.props.displayConsoleCreate('block');
            });
    }

    componentDidMount() {
       this.props.videoFileNameCreate('');
       this.props.videoOpCreate('');
       this.props.videoUrlCreate('');
       this.props.displayConsoleCreate('block');
       let accesstoken = '';
        if (JSON.parse(localStorage.getItem(global.constants.const_localstorage_id) || '[]')[0] === undefined ||
            JSON.parse(localStorage.getItem(global.constants.const_localstorage_id) || '[]')[0].username === undefined) {
            accesstoken = global.constants.const_default_accesstoken;
        } else {
            accesstoken = JSON.parse(localStorage.getItem(global.constants.const_localstorage_id) || '[]')[0].accesstoken;
        }
        let url = global.constants.const_api_url + "/app/video/upload?accesstoken=" + accesstoken;
        uploadProps = {
                  action: url,
                  multiple: false,
                  data: {},
                  headers: {
                      'Access-Control-Allow-Origin': '*'
                  },
                  onStart(file) {
                      console.log('onStart', file, file.name);
                  },
                  onSuccess(res, file) {
                      localStorage.setItem('aya-video-upload-filename', res[0].filename);
                  },
                  onError(err) {
                      console.log('onError', err);
                  },
                  onProgress({ percent }, file) {
                      console.log('onProgress', `${percent}%`, file.name);
                  },
                  customRequest({
                      action,
                      data,
                      file,
                      filename,
                      headers,
                      onError,
                      onProgress,
                      onSuccess,
                  }) {
                      const formData = new FormData();
                      if (data) {
                         Object.keys(data).forEach(key => {
                            formData.append(key, data[key]);
                         });
                       }
                       formData.append(filename, file);
                       axios
                         .post(action, formData, {
                            headers,
                            onUploadProgress: ({ total, loaded }) => {
                              onProgress({ percent: Math.round((loaded / total) * 100).toFixed(2) }, file);
                            },
                         })
                         .then(({ data: response }) => {
                             onSuccess(response, file);
                         })
                         .catch(onError);
                       return {
                         abort() {
                            console.log('upload progress is aborted.');
                         },
                       };
                    },
         };
    }

    render() {
        const displayconsole = this.props.display_console;       
        return (
            <div>
              <MyHeader myheadertitle={global.constants.const_app_video_edit} />
              <WhiteSpace size="lg" />
              <WingBlank size="lg">
                <div key='video-1' style={{ display: displayconsole==='none'?'none':'block' }}>
                  <div style={{ margin: 30,}} >
                    <div>
                       <Flex>
                           <Flex.Item>
                             <Upload {...uploadProps}>
                               <EButton type="info" ><i className="el-icon-plus"></i></EButton>
                             </Upload>
                           </Flex.Item>
                           <Flex.Item>
                               <EButton type="info" onClick={() => {this.handleShowActionSheetFilter();}} >滤镜</EButton>
                           </Flex.Item>
                           <Flex.Item>
                               <EButton type="info" onClick={() => {this.handleShowActionSheetStage();}} >道具</EButton>
                           </Flex.Item>
                       </Flex>
                    </div>
                  </div>
                  <div><Button type="primary" onClick={(e) => {this.handleVideoDowith(e);}}>提交</Button></div>
                </div>
                <div key='video-2' style={{ display: displayconsole==='none'?'block':'none' }}>
                    <div style={{ width: 500, height: 300}} >
                      <ReactPlayer url={this.props.video_url} />
                    </div>
                    <WhiteSpace size="lg" />
                    <div><Button type="primary" onClick={(e) => {this.handleVideoDownload(e);}}>下载</Button></div>
                    <WhiteSpace size="lg" />
                    <div><Button type="primary" onClick={(e) => {this.handleVideoEdit(e);}}>取消</Button></div>
                </div>
              </WingBlank>
            </div >
        );
    }
    static propTypes = {
        video_file_name: PropTypes.string,
        videoFileNameCreate: PropTypes.func,
        video_op: PropTypes.string,
        videoOpCreate: PropTypes.func,
        video_url: PropTypes.string,
        videoUrlCreate: PropTypes.func,
        display_console: PropTypes.string,
        displayConsoleCreate: PropTypes.func,
    }
}

const VideoWrapper = createForm()(Video);
export default VideoWrapper;

